#encoding:gbk
'''
1、补仓是按照原来的补仓量处理的
2、收盘时会保存当天委托
'''
import pandas as pd
import numpy as np
import talib
import time
import datetime

#账户总金额
total_amount = 200*10000
# 可用于股票交易的
can_use_amount = total_amount * 0.3
# 买入股票数量上限
stock_position_up = 50
# 买入单股金额
single_order_amount = int(can_use_amount/stock_position_up)
# 补仓次数上限
bucang_cishu_shangxian = 20

#止盈点数，卖出
target_profit = 3*0.01
#下跌 3%买入
bull_rate = 3*0.01
# 补仓 止盈点数
target_profit_bucang = 3*0.01
# 补仓下跌 3%买入
bull_rate_bucang = 3*0.01


# 主动委托，报价加减百分比
price_rate = 0.01*0.1
# 是否可以交易
can_trading = False
#  记录补仓信息
cover_position_dic ={}
# 补仓信息存储路径
path0 = 'C:\\Users\\AMD\\Desktop\\bucang\\'
stock_list =[]
# 自选股路径
path_zx = 'C:\\Users\\AMD\\Desktop\\300.EBK'
# 保存委托明细
today_str = datetime.date.today().strftime('%Y%m%d')
path_save_order = 'C:\\Users\\AMD\\Desktop\\bucang\\'+today_str+'__weituomingxi.csv'
path_save_deal = 'C:\\Users\\AMD\\Desktop\\bucang\\'+today_str+'__chengjiaomingxi.csv'
shoupan = 0

yichuli_weituohao =[]
def init(ContextInfo):
    global stock_list
    global cover_position_dic
    global path_zx

    ContextInfo.accID = '410001093849'
    cover_position_dic['stock'] = []
    cover_position_dic['price'] = []
    cover_position_dic['volume'] = []
    cover_position_dic['orderid'] = []

    try:
        read_cover()
    except:
        print('之前未有补仓文件')

    with open(path_zx,'r') as fp:
        F = fp.read()
    code_list = F.split('\n')
    for code in code_list:
        if code != '':
            if code[1]=='0' or code[1]=='3':
                stock = code[1:] +'.SZ'
            elif code[1]=='6':
                stock = code[1:] +'.SH'
            stock_list.append(stock)
    df_order = order_info(ContextInfo)
    handle_cover_information(df_order)
    print(f'初始化完成 盯盘{len(stock_list)}只')
    
def handlebar(ContextInfo):
    global price_rate
    global single_order_amount
    global stock_position_up
    global target_profit
    global cover_position_dic
    global stock_list
    global bucang_cishu_shangxian
    global can_trading
    global shoupan
    
    if ContextInfo.is_new_bar():
        shoupan = 0
    if not ContextInfo.is_last_bar():
        return
        
    if not '09:30:01'<time.strftime('%H:%M:%S', time.localtime())<'15:30:00':
        return
        
    Tick_time_str = timetag_to_datetime(ContextInfo.get_tick_timetag(), '%H:%M:%S')
    df_position = position_info(ContextInfo)
    df_order = order_info(ContextInfo)
    # 获取持仓代码
    stock_position_list = list(df_position['代码'])
    stock_order_list = list(df_position['代码'])
    
    if '09:30:00'<Tick_time_str<'15:00:10':
        can_trading = True
    
    if can_trading:
        Tick = ContextInfo.get_full_tick(stock_code=stock_list)
        # 通过处理委托信息，来获得补仓信息
        handle_cover_information(df_order)
        # 处理补仓卖出
        handle_cover(Tick,ContextInfo)
        # 盯盘买入
        for stock in Tick.keys():
            tick = Tick[stock]
            lastprice = tick['lastPrice']
            bull_signal = get_bull_signal(tick)
            # 判断是否可以买入
            can_bull = False
            if stock[:2]=='68':
                can_bull = int(single_order_amount/(lastprice*200))>=1
            else:
                can_bull = int(single_order_amount/(lastprice*100))>=1
            # 没有持仓、没有委托，持仓股数小于上限，出现买入信号，直接买入
            if bull_signal and (stock not in stock_position_list) and (stock not in stock_order_list) and len(stock_position_list)<stock_position_up and can_bull:
                order_price = float(f'{lastprice*(1+price_rate):.2f}')
                order_amo = float(single_order_amount)
                passorder(23,1102,ContextInfo.accID,stock,11,order_price,order_amo,1,ContextInfo)
                print(f'{stock} 下单买入{order_amo}元 委托价{order_price}')
        # 处理补仓 买入
        chuli_bucang(Tick,df_position,df_order,ContextInfo)
        # 当前没有补仓的代码，盯盘卖出
        for i in range(len(df_position)):
            stock = df_position['代码'][i]
            if stock not in cover_position_dic['stock']:
                profit_loss_rate = df_position['盈亏比例'][i]
                can_use_vol = df_position['可用余额'][i]
                try:
                    tick = Tick[stock]
                    lastprice = tick['lastPrice']
                    if profit_loss_rate>target_profit and can_use_vol>0:
                        order_price = float(f'{lastprice*(1-price_rate):.2f}')
                        passorder(24,1101,ContextInfo.accID,stock,11,order_price,can_use_vol,1,ContextInfo)
                        print(f'{stock} 下单卖出{can_use_vol}股 委托价{order_price}')
                except:
                    pass
    else:
        if shoupan==0:
            save_order(ContextInfo)
            shoupan = 1

# 计算补仓量
def get_bucang_vol(df_position,stock):
    global cover_position_dic
    global cover_position_dic
    for i in range(len(cover_position_dic['stock'])):
       code =  cover_position_dic['stock'][i]
       vol = float(cover_position_dic['volume'][i])
       if code == stock:
           return vol
    else:
        try:
            vol = df_position[df_position['代码']==stock]['持仓量'].iloc[-1]
        except:
            vol = 0
        return vol
        
# 计算 补仓买入信号
def get_bull_signal(tick):
    global bull_rate
    bull_signal = False
    lastprice = tick['lastPrice']
    lastclose = tick['lastClose']
    if (lastprice/lastclose -1)<-bull_rate:
        bull_signal = True
    return bull_signal
    
# 计算处理补仓
def chuli_bucang(Tick,df_position,df_order,ContextInfo):
    global bull_rate_bucang
    global cover_position_dic
    global bucang_cishu_shangxian
    # 处理补仓买入的
    for stock in Tick.keys():
        tick = Tick[stock]
        lastprice = tick['lastPrice']
        lastclose = tick['lastClose']
        try:
            df1 = df_order[df_order['代码']==stock]
            df2 = df1[df1['开平']==48]
        except:
            df2 = []
        # 没有买入操作
        if len(df2)==0:
            # 之前已经补过仓位了
            if stock in cover_position_dic['stock']:
                for i in range(1,len(cover_position_dic['orderid'])+1):
                    price = float(cover_position_dic['price'][-i])
                    code = cover_position_dic['stock'][-i]
                    vol = float(cover_position_dic['volume'][-i])
                    id = cover_position_dic['orderid'][-i]
                    if stock == code:
                        if (lastprice/price -1)<-bull_rate_bucang and len(cover_position_dic['orderid'])<bucang_cishu_shangxian:
                            order_price = float(f'{lastprice*(1+price_rate):.2f}')
                            passorder(23,1101,ContextInfo.accID,stock,11,order_price,vol,'bucang',1,'bucang',ContextInfo)
                            print(f'下单补仓{stock} 数量{vol}')
                        break
            else:
                if stock in list(df_position['代码']):
                    fudongyingkui = df_position[df_position['代码']==stock]['盈亏比例'].iloc[-1]
                    vol = df_position[df_position['代码']==stock]['持仓量'].iloc[-1]
                    if fudongyingkui<-bull_rate_bucang and len(cover_position_dic['orderid'])<bucang_cishu_shangxian and vol>0:
                        order_price = float(f'{lastprice*(1+price_rate):.2f}')
                        passorder(23,1101,ContextInfo.accID,stock,11,order_price,vol,'bucang',1,'bucang',ContextInfo)
                        print(f'下单补仓{stock} 数量{vol}')

#处理委托信息，确定补仓信息
def handle_cover_information(df):
    global cover_position_dic
    global yichuli_weituohao
    for i in range(len(df)):
        stock = df['代码'][i]
        touzibeizhu = df['投资备注'][i]
        weituojia = df['委托价格'][i]
        fangxiang = df['开平'][i]
        weituohao = df['委托号'][i]
        riqi = df['委托日期'][i]
        shijian = df['委托时间'][i]
        vol = df['委托量'][i]
        zhuangtai = df['委托状态'][i]
        # 委托状态是已成交，备注是bucang
        if touzibeizhu == 'bucang' and zhuangtai==56 and fangxiang == 48 and str(weituohao) not in cover_position_dic['orderid'] and weituohao not in yichuli_weituohao:
            # 委托是买入，增加补仓信息进来
            cover_position_dic['stock'].append(stock)
            cover_position_dic['price'].append(f'{weituojia:.2f}')
            cover_position_dic['volume'].append(str(vol))
            cover_position_dic['orderid'].append(str(weituohao))
            yichuli_weituohao.append(weituohao)
            print(f'增加补仓信息{stock} 委托价{weituojia:.2f} 委托量{vol} 委托号{weituohao}')
        # 平补仓,从补仓信息中去除
        if touzibeizhu != 'bucang' and touzibeizhu != '' and touzibeizhu.isdigit() and zhuangtai==56 and fangxiang == 49 and len(cover_position_dic['orderid'])>0 and weituohao not in yichuli_weituohao:
            for j in range(1,len(cover_position_dic['orderid'])+1):
                if touzibeizhu == cover_position_dic['orderid'][-j]:
                    print(f'去除{stock} 一条补仓信息 ')
                    del cover_position_dic['stock'][-j]
                    del cover_position_dic['price'][-j]
                    del cover_position_dic['volume'][-j]
                    del cover_position_dic['orderid'][-j]
                    yichuli_weituohao.append(weituohao)
                    break

# 处理补仓盯盘卖出
def handle_cover(Tick,ContextInfo):
    global cover_position_dic
    global target_profit_bucang
    global price_rate
    
    for i in range(len(cover_position_dic['stock'])):
        stock = cover_position_dic['stock'][i]
        price = float(cover_position_dic['price'][i])
        volume = float(cover_position_dic['volume'][i])
        orderid = cover_position_dic['orderid'][i]
        tick = Tick[stock]
        lastprice = tick['lastPrice']
        if (lastprice/price-1)>target_profit_bucang:
            can_use_vol = volume
            order_price = float(f'{lastprice*(1-price_rate):.2f}')
            passorder(24,1101,ContextInfo.accID,stock,11,order_price,can_use_vol,'pingbucang',1,orderid,ContextInfo)
            print(f'{stock} 下单卖出补仓 {can_use_vol}股 委托价{order_price}')

def position_info(ContextInfo):
    df_position =pd.DataFrame(columns=['代码','证券名称','成交日期','成交号','持仓量','持仓成本','当前交易日','开仓成本','最新价','浮动盈亏','市值','是否今仓','冻结数量','可用余额','在途股份','昨夜拥股','盈亏比例','成交类型'])
    position_list = get_trade_detail_data(ContextInfo.accID,'stock','position')
    for i in range(len(position_list)):
        obj = position_list[i]
        code = obj.m_strInstrumentID +'.' +obj.m_strExchangeID
        xinxi = [code,obj.m_strInstrumentName,obj.m_strOpenDate,obj.m_strTradeID,obj.m_nVolume,obj.m_dOpenPrice,obj.m_strTradingDay,obj.m_dOpenCost,obj.m_dSettlementPrice,obj.m_dFloatProfit,obj.m_dMarketValue,obj.m_bIsToday,obj.m_nFrozenVolume,obj.m_nCanUseVolume,obj.m_nOnRoadVolume,obj.m_nYesterdayVolume,obj.m_dProfitRate,obj.m_eFutureTradeType]
        df_position.loc[i] = xinxi
    return df_position
        
def order_info(ContextInfo):
    df_order =pd.DataFrame(columns =['代码','证券名称','内部委托号','类型','委托价格','委托量','委托号','买卖方向','开平','委托状态','成交数量','委托剩余量','任务号','冻结金额','冻结手续费','委托日期','委托时间','成交均价','已撤数量','买卖标记','成交金额','委托类别','废单原因','合约编号','投资备注'])
    order_list = get_trade_detail_data(ContextInfo.accID,'stock','order')
    order_id_list = list(df_order['委托号'])
    for i in range(len(order_list)):
        obj = order_list[i]
        code = obj.m_strInstrumentID +'.' +obj.m_strExchangeID
        xinxi = [code,obj.m_strInstrumentName,obj.m_strOrderRef,obj.m_nOrderPriceType,obj.m_dLimitPrice,obj.m_nVolumeTotalOriginal,obj.m_strOrderSysID,obj.m_nDirection,obj.m_nOffsetFlag,obj.m_nOrderStatus,obj.m_nVolumeTraded,obj.m_nVolumeTotal,obj.m_nTaskId,obj.m_dFrozenMargin,obj.m_dFrozenCommission,obj.m_strInsertDate,obj.m_strInsertTime,obj.m_dTradedPrice,obj.m_dCancelAmount,obj.m_strOptName,obj.m_dTradeAmount,obj.m_eEntrustType,obj.m_strCancelInfo,obj.m_strCompactNo,obj.m_strRemark]
        df_order.loc[len(df_order)] = xinxi
    return df_order

# 保存补仓信息，方便第二天调用
def save_cover():
    global path0
    global cover_position_dic
    stock_str =''
    price_str = ''
    volume_str =''
    orderid_str =''
    for i in range(len(cover_position_dic['stock'])):
        if i != (len(cover_position_dic['stock'])-1):
            stock_str += cover_position_dic['stock'][i] +','
            price_str += cover_position_dic['price'][i] +','
            volume_str += cover_position_dic['volume'][i] +','
            orderid_str += cover_position_dic['orderid'][i] +','
        elif i == (len(cover_position_dic['stock'])-1):
            stock_str += cover_position_dic['stock'][i]
            price_str += cover_position_dic['price'][i]
            volume_str += cover_position_dic['volume'][i]
            orderid_str += cover_position_dic['orderid'][i]
    all_str = stock_str +';' + price_str +';' + volume_str +';' + orderid_str
    path = path0 +'cover.txt'
    if stock_str != '':
        with open(path,'w') as fp:
            fp.write(all_str)
        print('补仓信息已保存')
    
# 读取补仓信息，方便盯盘补仓卖出
def read_cover():
    global path0
    global cover_position_dic
    path = path0 +'cover.txt'
    with open(path,'r') as fp:
        all_str = fp.read()
    # 不是空文件
    if all_str !='':
        cover_list = all_str.split(';')
        if cover_list[0] !='':
            stock_list = cover_list[0].split(',')
            price_list = cover_list[1].split(',')
            volume_list = cover_list[2].split(',')
            orderid_list = cover_list[3].split(',')
            
            cover_position_dic['stock'] = stock_list
            cover_position_dic['price'] = price_list
            cover_position_dic['volume'] = volume_list
            cover_position_dic['orderid'] = orderid_list
            print(f'补仓信息已读取  {cover_position_dic}')

# 按下停止键处理
def stop(ContextInfo):
    save_cover()
    save_order(ContextInfo)

# 保存委托信息
def save_order(ContextInfo):
    global path_save_order
    df_order = order_info(ContextInfo)
    df_order.to_csv(path_save_order,encoding ='gbk',index = False)
    print(f'委托信息已保存  {df_order}')







